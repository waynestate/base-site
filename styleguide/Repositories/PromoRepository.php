<?php

namespace Styleguide\Repositories;

use App\Repositories\PromoRepository as Repository;
use Contracts\Repositories\ModularPageRepositoryContract;
use Faker\Factory;
use Factories\FooterContact;
use Factories\FooterSocial;
use Factories\HeroImage;
use Factories\HeroImageRotate;
use Factories\GenericPromo;
use Factories\Button;

class PromoRepository extends Repository
{
    /**
     * Construct the factory.
     */
    public function __construct(
        Factory $faker,
        ModularPageRepositoryContract $components
    ) {
        $this->faker = $faker->create();
        $this->components = $components;
    }

    /**
     * {@inheritdoc}
     */
    public function getRequestData(array &$data)
    {
        /*
        |--------------------------------------------------------------------------
        | Do not edit this file!
        |--------------------------------------------------------------------------
        |
        | Add to config/base.app Global Data => $global['all']['promos']['new_promo']
        | - or -
        | Extend this repository; copy and edit these stubs:
        |     stubs/extend-repository.stub => app/Repositories/PromosExtendedRepository.php
        |     stubs/extend-repository-styleguide.stub => styleguide/Repositories/PromosExtendedRepository.php
        |
        |     Update config/base.app Global Data 'callbacks' and replace:
        |     '\Repositories\PromoRepository@getRequestData' => '\Repositories\PromosExtendedRepository@getRequestData'
        |
        */

        // Define the pages that have under menu promos: page_id => quanity
        $under_menu_page_ids = [
            114100 => 3, // Styleguide
        ];

        // Only pull under_menu promos if they match the page_ids that are specified
        $under_menu = !empty($under_menu_page_ids[$data['page']['id']]) ? app(Button::class)->create($under_menu_page_ids[$data['page']['id']]) : null;

        $hero_option = $this->faker->randomElement(['Text Overlay', 'SVG Overlay', 'Half', 'Logo Overlay', '']);

        // Define the pages that have hero images
        $hero_page_ids = [
            // Homepage
            101101 => app(HeroImage::class)->create(1, false, [
                'relative_url' => '/styleguide/image/3200x600?text=Hero+Image',
            ]),
            // Contained
            105100100 => app(HeroImage::class)->create(1, false),
            // Banner large
            105100103 => app(HeroImage::class)->create(1, false, [
                'option' => 'Banner large',
                'relative_url' => '/styleguide/image/3200x1160',
            ]),
            // Rotate
            105100104 => app(HeroImageRotate::class)->create(4, false),
            // Text overlay
            105100105 => app(HeroImage::class)->create(1, false, [
                'option' => 'Text Overlay',
                'relative_url' => '/styleguide/image/3200x1160',
            ]),
            // SVG overlay
            105100106 => app(HeroImage::class)->create(1, false, [
                'option' => 'SVG Overlay',
                'relative_url' => '/styleguide/image/3200x1160',
                'secondary_relative_url' => '/_resources/images/youtube-play.svg',
            ]),
            // Logo overlay
            105100107 => app(HeroImage::class)->create(1, false, [
                'option' => 'Logo Overlay',
                'relative_url' => '/styleguide/image/3200x1160',
                'secondary_relative_url' => '/styleguide/image/600x250?text=600x250',
            ]),
            // Banner small
            105100108 => app(HeroImage::class)->create(1, false, [
                'relative_url' => '/styleguide/image/3200x600',
            ]),
            // Half
            105100109 => app(HeroImage::class)->create(1, false, [
                'option' => 'Half',
                'relative_url' => '/styleguide/image/1920x1080',
            ]),
            // Childpage
            101100 => app(HeroImage::class)->create(1, false),
            // Layout small banner hero
            105100108 => app(HeroImage::class)->create(1, false, [
                'option' => 'Banner small',
                'relative_url' => '/styleguide/image/3200x600?text=Small+banner+hero+image',
            ]),
            // Layout contained banner hero
            120100101 => app(HeroImage::class)->create(1, false, [
                'relative_url' => '/styleguide/image/1600x580?text=Contained+hero+image',
            ]),
        ];

        // Only pull hero promos if they match the page ids that are specificed
        $styleguide_hero = !empty($hero_page_ids[$data['page']['id']]) ? $hero_page_ids[$data['page']['id']] : null;

        // Full width page IDs
        $hero_full_width_ids = [
            105100103,
            105100104,
            105100105,
            105100106,
            105100107,
            105100108,
            105100109,
        ];

        // Set the config for full width hero if they match the page ids that are specified
        if (in_array($data['page']['id'], $hero_full_width_ids)) {
            config([
                'base.hero_full_controllers' => ['HeroController'],
            ]);
        }

        // Get all the social icons
        $social = collect([
            'x',
            'twitter',
            'tiktok',
            'facebook',
            'instagram',
            'youtube',
            'snapchat',
            'linkedin',
            'flickr',
            'pinterest',
            'mastodon',
        ])->map(function ($name) {
            return app(FooterSocial::class)->create(1, true, ['title' => $name]);
        })
        ->reject(function ($item) {
            return empty($item);
        })
        ->toArray();

        /*
        |--------------------------------------------------------------------------
        | Modular components
        |--------------------------------------------------------------------------
        */

        // Add modular components into global data
        $components = $this->components->getModularComponents($data);

        // Set hero from components
        $hero = collect($components)->reject(function ($data, $componentName) {
            return !str_contains($componentName, 'hero');
        })->toArray();

        if (!empty($hero)) {
            $hero_key = array_key_first($hero);
            $hero = $components[$hero_key]['data'];
            config(['base.hero_full_controllers' => [$data['page']['controller']]]);
            unset($components[$hero_key]);
        }

        /*
        |--------------------------------------------------------------------------
        | Setting global variables
        |--------------------------------------------------------------------------
        */

        $global_promos =  merge([
            'contact' => app(FooterContact::class)->create(1),
            'social' => $social,
            'hero' => $styleguide_hero ?? $hero ?? [],
            'under_menu' => $under_menu,
            'components' => $components,
        ]);

        return $global_promos;
    }

    /**
     * {@inheritdoc}
     */
    public function getPromoView($id)
    {
        return [
            'promo' => app(GenericPromo::class)->create(1, true, [
                'description' => '
                    <p>'.$this->faker->text(300).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a></p>
                    <p>'.$this->faker->text(100).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a> '. $this->faker->text(200).'</p>
                    <p>'.$this->faker->text(50).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a> '. $this->faker->text(250).'</p>
                    <figure class="figure float-left mb-4 w-full md:w-1/2 lg:w-1/3">
                        <img src="/styleguide/image/600x450?text=Embedded in description" class="p-2" alt="">
                        <figcaption class="mt-1">This image is from the promotion description</figcaption>
                    </figure>
                    <p>'.$this->faker->text(200).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a> '. $this->faker->text(100).'</p>
                    <p>'.$this->faker->text(200).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a> '. $this->faker->text(100).'</p>
                    <p>'.$this->faker->text(300).' <a href="https://wayne.edu">'.$this->faker->sentence(3).'</a> '. $this->faker->text(100).'</p>
                ',
                'relative_url' => '/styleguide/image/600x450?text=Primary%20promo%20image'
            ]),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function getBackToPromoListing($referer = null, $scheme = null, $host = null, $uri = null)
    {
        return '/styleguide/promolist';
    }
}
